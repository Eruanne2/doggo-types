{"version":3,"sources":["redux/dogActions.ts","util/dogsApiUtil.ts","redux/dogsReducer.ts","redux/store.ts","redux/typedHooks.ts","components/Header.tsx","assets/loading.gif","components/ImageIndex.tsx","components/BreedIndex.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["RECEIVE_ALL_DOGS","RECEIVE_BREED_IMAGES","getAllDogs","dispatch","fetch","then","res","json","breeds","Object","keys","message","type","getBreedImages","breed","DogApi","payload","images","DogsReducer","state","action","freeze","nextState","assign","forEach","store","configureStore","reducer","dogs","middleware","thunk","logger","useAppDispatch","useDispatch","useAppSelector","useSelector","Header","props","placeholder","onChange","e","target","preventDefault","updateSearch","value","handleChange","ImageIndex","imgs","selected","useEffect","imgGrid","img","i","push","className","length","map","row","src","BreedIndex","useState","setSelected","loadingGif","alt","slice","onClick","App","allDogs","searchVal","setSearchVal","filter","includes","console","log","inputVal","searching","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","addEventListener","window"],"mappings":"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","file":"static/js/main.6871a32f.chunk.js","sourcesContent":["import * as DogApi from '../util/dogsApiUtil';\nimport { AppDispatchType } from './store';\n\n// kinds of actions\nexport const RECEIVE_ALL_DOGS = 'RECEIVE_ALL_DOGS';\nexport const RECEIVE_BREED_IMAGES = 'RECEIVE_BREED_IMAGES';\n\n// define payload type (more specific than object!)\n\n// pojo action creators\nexport const receiveAllDogs = (breeds: Array<string>) => ({\n  type: RECEIVE_ALL_DOGS, breeds\n});\n\nexport const receiveBreedImages = (payload: object) => ({\n  type: RECEIVE_BREED_IMAGES, payload\n});\n\n// thunk creators\nexport const getAllDogs = () => (dispatch: AppDispatchType)=> {\n  return DogApi.fetchAllDogs()\n    .then(res => res.json()).then(res => dispatch(receiveAllDogs(Object.keys(res.message))));\n};\n\nexport const getBreedImages = (breed: string) => (dispatch: AppDispatchType)=> {\n  return DogApi.fetchBreedImages(breed)\n  .then(res => res.json()).then(res => dispatch(receiveBreedImages({breed, images: res.message})));\n};","export const fetchAllDogs = () => {\n  return fetch('https://dog.ceo/api/breeds/list/all')\n};\n\nexport const fetchBreedImages = (breed: string) => {\n  return fetch(`https://dog.ceo/api/breed/${breed}/images`)\n};","import { AnyAction } from 'redux';\nimport { RECEIVE_ALL_DOGS, RECEIVE_BREED_IMAGES } from './dogActions';\n\ntype stateType = { [key: string]: Array<string> };\n\nconst DogsReducer = (state: stateType = {}, action: AnyAction) => {\n  Object.freeze(state);\n  const nextState = Object.assign({}, state);\n  switch(action.type){\n    case RECEIVE_ALL_DOGS:\n      action.breeds.forEach((breed: string) => nextState[breed] = []);\n      return nextState;\n    case RECEIVE_BREED_IMAGES:\n      nextState[action.payload.breed] = action.payload.images;\n      return nextState;\n    default:\n      return state;\n  }\n}\n\nexport default DogsReducer;","import { configureStore } from '@reduxjs/toolkit';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\nimport DogsReducer from './dogsReducer';\n\nexport const store = configureStore({\n  reducer: { dogs: DogsReducer},\n  middleware: [thunk, logger]\n});\n\nexport type RootStateType = ReturnType<typeof store.getState>;\nexport type AppDispatchType = typeof store.dispatch;","// from Redux docs - pre-typed versions of useDispatch and useSelector\n\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootStateType, AppDispatchType } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatchType>();\nexport const useAppSelector: TypedUseSelectorHook<RootStateType> = useSelector;","import { ChangeEvent } from 'react';\nimport '../assets/header.css';\n\nexport default function Header(props: { updateSearch: (val: string) => void}) {\n  \n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const target = e.target as HTMLInputElement;\n    e.preventDefault();\n    props.updateSearch(target.value);\n  }\n  \n  return (\n    <header>\n      <h1>Dogs!</h1>\n      <div>\n        <input type='text' placeholder='Search' onChange={(e) => handleChange(e)}/>\n      </div>\n    </header>\n  )\n}","export default __webpack_public_path__ + \"static/media/loading.ed4c53a6.gif\";","import { useEffect, useState } from 'react';\nimport '../assets/ImageIndex.css';\nimport loadingGif from '../assets/loading.gif'\nimport { useAppSelector, useAppDispatch } from '../redux/typedHooks';\nimport { getBreedImages } from '../redux/dogActions';\n\n\nexport default function ImageIndex(props: { selected: string}) {\n  const imgs = useAppSelector(state => state.dogs[props.selected]);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    dispatch(getBreedImages(props.selected) as any) // better solution?\n  }, [props.selected]);\n\n\n  let imgGrid: Array<Array<string>> = [[], [], [], []];\n  imgs.forEach((img, i) => imgGrid[i % 4].push(img))\n  \n  return (\n    <div className='img-index-container'>\n      {\n        imgs.length === 0 ?\n        <div className='loading-container'>\n          <div className=\"lds-grid\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\n        </div>\n        :\n        <div className='img-grid'>\n          {imgGrid.map((row,i) => \n            <ul key={i} className='img-row'>\n              {row.map((img,i) =>\n                <img key={i} src={img}/>\n              )}\n            </ul>\n          )}\n        </div>\n      }\n    </div>\n  )\n}","import { useState } from 'react'\nimport '../assets/breedIndex.css';\nimport loadingGif from '../assets/loading.gif'\nimport ImageIndex from './ImageIndex';\n\nexport default function BreedIndex(props: { dogs: Array<string>, searching: boolean }) {\n  const [selected, setSelected] = useState<string | null>(null);\n\n  // if (props.searching && selected !== null) setSelected(null);\n\n  const dogs = props.dogs;\n\n  return (\n    <div className='breed-index-container'>\n      {\n        dogs.length === 0 ?\n        <div className='loading-container'>\n          <img src={loadingGif} alt='Fetching...'/>\n        </div>\n        :\n        <div>\n          <div className='grid'>\n            {dogs.slice(0,12).map((breed, i) => (\n              <li \n                key={i} \n                className={selected === breed ? 'selected' : ''}\n                onClick={() => setSelected(breed)}\n              >{breed}</li>\n            ))}\n          </div>\n          {\n            !selected ?\n            null\n            :\n            <ImageIndex selected={selected}/>\n          }\n        </div>\n      }\n    </div>\n  )\n}","import { useEffect, useState } from 'react';\nimport { getAllDogs } from './redux/dogActions';\nimport { useAppDispatch, useAppSelector } from './redux/typedHooks';\nimport './assets/reset.css';\nimport './assets/application.css';\nimport Header from './components/Header';\nimport BreedIndex from './components/BreedIndex';\n\nfunction App() {\n  const dispatch = useAppDispatch();\n  useEffect(() => {\n    dispatch(getAllDogs() as any) // better solution?\n  }, []);\n\n  const allDogs = useAppSelector(state => Object.keys(state.dogs));\n  const [searchVal, setSearchVal] = useState<string>('');\n\n  \n  const updateSearch = (inputVal: string) => {\n    setSearchVal(inputVal);\n  };\n\n  const dogs = allDogs.filter((breed: string) => breed.includes(searchVal));\n  console.log(dogs);\n  console.log(allDogs);\n  return (\n    <div className=\"App\">\n      <Header updateSearch={updateSearch}/>\n      <BreedIndex dogs={dogs} searching={searchVal !== ''}/>\n    </div>\n  );\n}\n\n\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\nimport ReactDOM from 'react-dom';\nimport './assets/reset.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { getAllDogs, getBreedImages } from './redux/dogActions';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  (window as any).store = store;\n  (window as any).getAllDogs = getAllDogs;\n  (window as any).getBreedImages = getBreedImages;\n})\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}